--EJERCICIO: CON UNA NUEVA ENTIDAD Y UNA NUEVA BITACORA REGISTRAR LAS OPERACIONES CRUD CON U TRIGGER MULTIPLE
-- CREAR LA SECUENCIA PARA ESE TRIGGER
--MAXIMO 5 REGISTROS

CREATE TABLE ALUMNO(
    ID_ALUMNO NUMBER,
    NOMBRE NVARCHAR2(100),
    APELLIDO NVARCHAR2(100),
    EDAD NUMBER,
    CURSO NVARCHAR2(100),
    GRADO NUMBER,
    CONSTRAINT ALUMNO_PK PRIMARY KEY (ID_ALUMNO)
);


CREATE TABLE BIT_ALUMNO(
    ID_BIT_ALUMNO NUMBER, --LLAVE PRIMARIA
    
    --VALORES NUEVOS
    ID_ALUMNO NUMBER,
    NOMBRE NVARCHAR2(100),
    APELLIDO NVARCHAR2(100),
    EDAD NUMBER,
    CURSO NVARCHAR2(100),
    GRADO NUMBER,
    
    --VALORES VIEJOS
    NOMBRE_OLD NVARCHAR2(100),
    APELLIDO_OLD NVARCHAR2(100),
    EDAD_OLD NUMBER,
    CURSO_OLD NVARCHAR2(100),
    GRADO_OLD NUMBER,
    
    --DATOS DE LA TABLA
    USUARIO NVARCHAR2(100),
    FECHA_MOV DATE,
    MOVIMIENTO NVARCHAR2(100),
    
    CONSTRAINT BIT_ALUMNO_PK PRIMARY KEY (ID_BIT_ALUMNO)
);

//CREACION DE SECUENCIA
CREATE SEQUENCE S_ID_BIT_ALUMNO
START WITH 1
MAXVALUE 999
MINVALUE 1
NOCYCLE;
/

CREATE OR REPLACE TRIGGER TR_MULTIPLE_ALUMNO
AFTER INSERT OR UPDATE OR DELETE ON ALUMNO
FOR EACH ROW
DECLARE
    LV_ID_BIT NUMBER;
    LV_USUARIO NVARCHAR2(100);
    LV_FECHA DATE;
BEGIN
    SELECT S_ID_BIT_ALUMNO.NEXTVAL, USER, SYSDATE INTO LV_ID_BIT, LV_USUARIO, LV_FECHA FROM DUAL;
    
    IF INSERTING THEN        
        INSERT INTO BIT_ALUMNO(ID_BIT_ALUMNO, ID_ALUMNO, NOMBRE, APELLIDO, EDAD, CURSO, GRADO, NOMBRE_OLD, APELLIDO_OLD, EDAD_OLD,CURSO_OLD, GRADO_OLD, USUARIO, FECHA_MOV, MOVIMIENTO)
        VALUES (LV_ID_BIT, :NEW.ID_ALUMNO, :NEW.NOMBRE, :NEW.APELLIDO, :NEW.EDAD, :NEW.CURSO, :NEW.GRADO, NULL,NULL,0,NULL, 0, 
        LV_USUARIO, LV_FECHA, 'INSERT');
    ELSIF UPDATING THEN
        INSERT INTO BIT_ALUMNO(ID_BIT_ALUMNO, ID_ALUMNO, NOMBRE, APELLIDO, EDAD, CURSO, GRADO, NOMBRE_OLD, APELLIDO_OLD, EDAD_OLD,CURSO_OLD, GRADO_OLD, USUARIO, FECHA_MOV, MOVIMIENTO)
        VALUES (LV_ID_BIT, :NEW.ID_ALUMNO, :NEW.NOMBRE, :NEW.APELLIDO, :NEW.EDAD, :NEW.CURSO, :NEW.GRADO, :OLD.NOMBRE, :OLD.APELLIDO, :OLD.EDAD, :OLD.CURSO, :OLD.GRADO, 
        LV_USUARIO, LV_FECHA, 'UPDATE');
    ELSIF DELETING THEN
        INSERT INTO BIT_ALUMNO(ID_BIT_ALUMNO, ID_ALUMNO, NOMBRE, APELLIDO, EDAD, CURSO, GRADO, NOMBRE_OLD, APELLIDO_OLD, EDAD_OLD,CURSO_OLD, GRADO_OLD, USUARIO, FECHA_MOV, MOVIMIENTO)
        VALUES (LV_ID_BIT, :OLD.ID_ALUMNO, NULL, NULL, NULL, NULL, NULL, :OLD.NOMBRE, :OLD.APELLIDO, :OLD.EDAD, :OLD.CURSO, :OLD.GRADO, 
        LV_USUARIO, LV_FECHA, 'DELETE');
    END IF;
END TR_MULTIPLE_ALUMNO;
/

//PRUEBAS
SELECT * FROM ALUMNO;
SELECT * FROM BIT_ALUMNO;

//INSERTAR
INSERT INTO ALUMNO VALUES(1, 'JUAN', 'JIMENEZ', 22, 'CONTABILIDAD', 4);
INSERT INTO ALUMNO VALUES(2, 'CARLOS', 'VICENTE', 24, 'ADMINISTRACION', 6);
COMMIT;

//ACTUALIZAR
UPDATE ALUMNO SET EDAD= 26 WHERE ID_ALUMNO =1;
COMMIT;

//ELIMINAR
DELETE FROM ALUMNO WHERE ID_ALUMNO > 1;
COMMIT;

DELETE FROM BIT_ALUMNO;
DELETE FROM ALUMNO;