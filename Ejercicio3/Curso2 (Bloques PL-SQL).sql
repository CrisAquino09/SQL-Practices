--EJECUCION PL/SQL

--SINTAXIS
--DECLARACIONES (OPCIONAL): EN DONDE SE DECLARAN CONSTANTES, VARIABLES Y CURSORES QUE SE UTILIZAN EN EL BLOQUE
--INSTRUCCIONES: CONTIENE LAS SENTENCIAS A EJECUTAR
--EXCEPCIONES: SE PUEDEN CAPTURAR EXCEPCIONES DEL SISTEMA POR EL HORARIO

--EJEMPLO:
/*
DECLARE IS|AS
BEGIN 
...
EXCEPCIONES
END;
/
*/

--BLOQUE ANONIMO PL/SQL
DECLARE --DECLARACION DE VARIABLES CONSTANTES Y CURSORES
LV_VARIABLE NUMBER :=0;
BEGIN --DONDE INICIA LA EJECUCION DE SENTENCIAS
    DBMS_OUTPUT.PUT_LINE('HOLA MUNDO DESDE BLOQUE ANONIMO PL/SQL');
END; --CIERRA EL BLOQUE
/--HASTA AQUI SE EJECUTA EL BLOQUE. ES UN INDICADOR

--USO DE CICLOS CON PL/SQL
DECLARE
LV_VARIABLE NUMBER :=0;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE('VALOR: ' || LV_VARIABLE);
        LV_VARIABLE := LV_VARIABLE +1;
        --CONDICION SALIR CUANDO LA VARIABLE LLEGUE A CIERTO NUMERO
        IF LV_VARIABLE = 11
            THEN EXIT;
        END IF;
    END LOOP;
END;
/

--USO DE FOOR Y LOOP
DECLARE
BEGIN
    FOR i IN 1..10 
    LOOP
        DBMS_OUTPUT.PUT_LINE('NUMERACION CON FOR: ' || i );
        EXIT WHEN i=6;
    END LOOP;    
END;
/

--USO DE WHILE Y LOOP
DECLARE
    LV_VARIABLE NUMBER := 1;
BEGIN
    WHILE LV_VARIABLE <= 10 
    LOOP
        DBMS_OUTPUT.PUT_LINE('NUMERACION CON WHILE: ' || LV_VARIABLE);
        LV_VARIABLE := LV_VARIABLE+1;
    END LOOP;
END;
/

--USO DE VARIABLES BOOLEANAS Y LOOP
DECLARE
LV_VARIABLE BOOLEAN := FALSE;
BEGIN
    FOR i IN 1..20
        LOOP
            DBMS_OUTPUT.PUT_LINE('VALOR DEL ITERADOR: ' || i);
            IF i = 9
                THEN 
                LV_VARIABLE :=TRUE;
            END IF;
            EXIT WHEN LV_VARIABLE;
        END LOOP;
END;
/

